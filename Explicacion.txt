

IMPORTANTE EL BACK ES EXTERNO 
> LEVANTAR DOCKER 
> C:\Users\jesus\Desktop\JESUS\REACT NATIVE\FernadoHerreraCurso\productApp\back\tesloshop-backend
> en postman > react native > crud_proyecto
> recordar hay metodos rest > como los get de products q llevan >
     autorization > bearer token > token (poner el token de login)


1. 


C:\Users\jesus\Desktop\JESUS\REACT NATIVE\FernadoHerreraCurso\productApp>npx create-expo-app@latest products-app
Need to install the following packages:
create-expo-app@3.4.2
Ok to proceed? (y) y

Creating an Expo project using the default template.

To choose from all available templates (https://github.com/expo/expo/tree/main/templates) pass in the --template arg:
  $ npx create-expo-app --template

To choose from all available examples (https://github.com/expo/examples) pass in the --example arg:
  $ npx create-expo-app --example

√ Downloaded and extracted project files.
> npm install
npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
npm warn deprecated rimraf@3.0.2: Rimraf versions prior to v4 are no longer supported
npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported

added 952 packages, and audited 953 packages in 2m

177 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

✅ Your project is ready!

To run your project, navigate to the directory and run one of the following npm commands.

- cd products-app
- npm run android
- npm run ios # you need to use macOS to build the iOS project - use the Expo app if you need to do iOS development without a Mac
- npm run web



2.
 limpiando 
 > app
     borra not-found , +html --files
     (tabs)  --folder
     scripts   -- folder   

3.
  ESTRUCTURA DEL APP 

 creando folders para componentes y hooks
  > presentation\auth
  > presentation\theme
  >presentation\products\hooks  --- para TanStackquery 

 para solo autenticados 
  >app\(products-app)\(home)
 para  que autentiquen osea general
  > app\auth
  > app\(products-app)

 folder para regla de negocio y metodos rest
  > core
  > core\auth\interface\user.ts  --- clase modelo de mi user
 
 folder para almacenar token.etc 
 helpers\adapters


 ojo : folder q inician 
  > inicia > app\_layout.tsx
  > luego dirige ahi > app\(products-app)\_layout.tsx



  4. 
   USANDO FUENTES DE GOOGLE FONTS EN TU PROYECTO
  en google fonts 
  > selecciona y busca tu estilo de letras > get font > arriba
  >download all 
  > en tu folder descomprime la carpeta
  > en este caso saldra varios files .ttf (en este ejemplo usare solo Kanit-Bold.ttf , Kanit-Regular.ttf,Kanit-Thin.ttf)


  > en tu proyecto 
  > copialas en el > assets\fonts
     si no existe ese folder crealo

  >  en tu layaout > app\_layout.tsx ---- usalas ahi poniendo los nombre al final y adalente poner su referencia
    const [loaded] = useFonts({
    SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),
    kanitRegular: require('../assets/fonts/Kanit-Regular.ttf'),
    kanitBold: require('../assets/fonts/Kanit-Bold.ttf'),
    kanitThin: require('../assets/fonts/Kanit-Thin.ttf'),
  });

  donde el kanitRegular .etc son sus nombres

  > en tu app\(products-app)\(home)\index.tsx
   lo llamas asi , donde el  kanitBold es el name correspondiente
  <ThemedText style={{fontFamily:'kanitBold'}}>HomeScreen</ThemedText>



5. dependencias 

 para estado
 > npm install zustand

peticiones
 >npm install axios



6. 
  variables de entorno 


   > .env > crea y edita ahi adentro
   > has una copia de eso y vuelve a pegarlo
   > y cambia su nombe x > .env.template

  ojo: recordar ahi ponemos las ip de mi pc , en ciertos casos cambia la ip de mi pc donde esta corriendo el back con docker

7.
  recordar cualquier configuracion ponerlo en el > README.md   


8.
 iconos > presentation\theme\components\ThemedTextInput.tsx
 iconos  

documentacion > https://icons.expo.fyi/Index


9.
 para seguridad del token o almcenar el token> https://docs.expo.dev/versions/latest/sdk/securestore/

  npx expo install expo-secure-store

  > helpers\adapters\secury-storage.adapter.ts


10.

TanStack Query  : (algo asi como zustand)
 TanStack Query (anteriormente conocida como React Query) a menudo se describe como la biblioteca de obtención de datos que faltaba para las aplicaciones web, pero en términos más técnicos, hace que la obtención, el almacenamiento en caché, la sincronización y la actualización del estado del servidor en sus aplicaciones web sean muy fáciles.    

 documentation : https://tanstack.com/query/latest/docs/framework/react/installation

 PS C:\Users\jesus\Desktop\JESUS\REACT NATIVE\FernadoHerreraCurso\app6\movies> npm i @tanstack/react-query


 > configurando el tansquery
   app\_layout.tsx